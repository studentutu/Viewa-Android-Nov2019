using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using System;
using System.Collections.Generic;
using frame8.Logic.Misc.Visual.UI.ScrollRectItemsAdapter;
using frame8.Logic.Misc.Other.Extensions;
using frame8.ScrollRectItemsAdapter.Util;
using frame8.ScrollRectItemsAdapter.Util.GridView;

// The date was temporarily included in the namespace to prevent duplicate class names
// You should modify the namespace to your own or - if you're sure there will be no conflicts - remove it altogether
namespace Your.Namespace.Here.Grids
{
	// There is 1 important callback you need to implement: UpdateCellViewsHolder()
	// See explanations below
	public class GridSRIA : GridAdapter<MyGridParams, MyGridItemViewsHolder>
	{
		#region SRIA implementation
		protected override void Start()
		{
			// Calling this initializes internal data and prepares the adapter to handle item count changes
			base.Start();

			// Retrieve the models from your data source and set the items count
			/*
			RetrieveDataAndUpdate(1500);
			*/
		}

		// This is called anytime a previously invisible item become visible, or after it's created, 
		// or when anything that requires a refresh happens
		// Here you bind the data from the model to the item's views
		// *For the method's full description check the base implementation
		protected override void UpdateCellViewsHolder(MyGridItemViewsHolder newOrRecycled)
		{
			// In this callback, "newOrRecycled.ItemIndex" is guaranteed to always reflect the
			// index of item that should be represented by this views holder. You'll use this index
			// to retrieve the model from your data set
			/*
			MyGridItemModel model = _Params.Data[newOrRecycled.ItemIndex];

			newOrRecycled.backgroundImage.color = model.color;
			newOrRecycled.titleText.text = model.title + " #" + newOrRecycled.ItemIndex;
			*/
		}

		// This is the best place to clear an item's views in order to prepare it from being recycled, but this is not always needed, 
		// especially if the views' values are being overwritten anyway. Instead, this can be used to, for example, cancel an image 
		// download request, if it's still in progress when the item goes out of the viewport.
		// <newItemIndex> will be non-negative if this item will be recycled as opposed to just being disabled
		// *For the method's full description check the base implementation
		/*
		protected override void OnBeforeRecycleOrDisableCellViewsHolder(MyGridItemViewsHolder inRecycleBinOrVisible, int newItemIndex)
		{

		}
		*/
		#endregion

		// These are common data manipulation methods
		// The list containing the models is managed by you. The adapter only manages the items' sizes and the count
		// The adapter needs to be notified of any change that occurs in the data list. 
		// For GridAdapters, only Refresh and ResetItems work for now
		#region data manipulation
		public void AddItemsAt(int index, params MyGridItemModel[] models)
		{
			_Params.Data.InsertRange(index, models);
			//Commented: this only works with Lists. Grids should call Refresh() at this moment
			//InsertItems(index, models.Length);
			Refresh();
		}

		public void RemoveItemFrom(int index, int count)
		{
			_Params.Data.RemoveRange(index, count);
			//Commented: this only works with Lists. Grids should call Refresh() at this moment
			//RemoveItems(index, count);
			Refresh();
		}

		public void SetItems(IEnumerable<MyGridItemModel> items)
		{
			_Params.Data.Clear();
			_Params.Data.AddRange(items);
			ResetItems(_Params.Data.Count);
		}
		#endregion


		// Here, we're requesting <count> items from the data source
		void RetrieveDataAndUpdate(int count)
		{
			StartCoroutine(FetchItemsFromDataSourceAndUpdate(count));
		}

		// Retrieving <count> models from the data source and calling OnDataRetrieved after.
		// In a real case scenario, you'd query your server, your database or whatever is your data source and call OnDataRetrieved after
		IEnumerator FetchItemsFromDataSourceAndUpdate(int count)
		{
			// Simulating data retrieving delay
			yield return new WaitForSeconds(.5f);

			// Retrieve your data here
			/*
			for (int i = 0; i < count; ++i)
			{
				var model = new MyGridItemModel()
				{
					title = "Random item ",
					color = Utils.GetRandomColor()
				};
				_Params.Data.Add(model);
			}
			*/

			OnDataRetrieved();
		}

		void OnDataRetrieved()
		{
			ResetItems(_Params.Data.Count);
		}
	}


	// Class containing the data associated with an item
	public class MyGridItemModel
	{
		/*
		public string title;
		public Color color;
		*/
	}


	// BaseParamsWithPrefabAndData<TModel> is the most commonly used type of parameters for ListViews.
	// It exposes a prefab property and the data is stored in a System.Collections.Generic.List<T>
	// Alternatives are: 
	// - BaseParams (used for more advanced setups, where you need control both over the prefab - maybe you have more than one prefab - and the data list)
	// - BaseParamsWithPrefab (when you have your own way of storing the data)
	// - BaseParamsWithPrefabAndLazyData (similar to the one used here, but it uses a LazyList<T>, as opposed to a simple System.Collections.Generic.List<T>)
	// - GridParams (used for grids. It exposes the cell prefab and some grid-specific parameters)
	// Should be marked as Serializable, so it can be shown in inspector
	[Serializable] 
	public class MyGridParams : GridParams
	{
		public List<MyGridItemModel> Data { get { return _Data; } }

		List<MyGridItemModel> _Data = new List<MyGridItemModel>();
	}


	// This class keeps references to an item's views.
	// Your views holder should extend BaseItemViewsHolder for ListViews and CellViewsHolder for GridViews
	// The cell views holder should have a single child (usually named "Views"), which contains the actual 
	// UI elements. A cell's root is never disabled - when a cell is removed, only its "views" GameObject will be disabled
	public class MyGridItemViewsHolder : CellViewsHolder
	{
		/*
		public Text titleText;
		public Image backgroundImage;
		*/


		// Retrieving the views from the item's root GameObject
		public override void CollectViews()
		{
			base.CollectViews();

			// GetComponentAtPath is a handy extension method from frame8.Logic.Misc.Other.Extensions
			// which infers the variable's component from its type, so you won't need to specify it yourself
			/*
			views.GetComponentAtPath("TitleText", out titleText);
			views.GetComponentAtPath("BackgroundImage", out backgroundImage);
			*/
		}
		
		// This is usually the only child of the item's root and it's called "Views". 
		// That's what the default implementation will look for, but just for flexibility, 
		// this callback is provided, in case it's named differently or there's more than 1 child 
		// *See GridExample.cs for more info
		/*
		protected override RectTransform GetViews()
		{ return root.Find("Views").transform as RectTransform; }
		*/

		// Override this if you have children layout groups. They need to be marked for rebuild when this callback is fired
		/*
		public override void MarkForRebuild()
		{
			base.MarkForRebuild();

			LayoutRebuilder.MarkLayoutForRebuild(yourChildLayout1);
			LayoutRebuilder.MarkLayoutForRebuild(yourChildLayout2);
		}
		*/
	}
}
